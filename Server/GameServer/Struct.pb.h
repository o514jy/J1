// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class BuffInfo;
struct BuffInfoDefaultTypeInternal;
extern BuffInfoDefaultTypeInternal _BuffInfo_default_instance_;
class ItemInfo;
struct ItemInfoDefaultTypeInternal;
extern ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class PosInfo;
struct PosInfoDefaultTypeInternal;
extern PosInfoDefaultTypeInternal _PosInfo_default_instance_;
class ProjectileInfo;
struct ProjectileInfoDefaultTypeInternal;
extern ProjectileInfoDefaultTypeInternal _ProjectileInfo_default_instance_;
class SimplePosInfo;
struct SimplePosInfoDefaultTypeInternal;
extern SimplePosInfoDefaultTypeInternal _SimplePosInfo_default_instance_;
class SkillInfo;
struct SkillInfoDefaultTypeInternal;
extern SkillInfoDefaultTypeInternal _SkillInfo_default_instance_;
class StatInfo;
struct StatInfoDefaultTypeInternal;
extern StatInfoDefaultTypeInternal _StatInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::BuffInfo* Arena::CreateMaybeMessage<::Protocol::BuffInfo>(Arena*);
template<> ::Protocol::ItemInfo* Arena::CreateMaybeMessage<::Protocol::ItemInfo>(Arena*);
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::PosInfo* Arena::CreateMaybeMessage<::Protocol::PosInfo>(Arena*);
template<> ::Protocol::ProjectileInfo* Arena::CreateMaybeMessage<::Protocol::ProjectileInfo>(Arena*);
template<> ::Protocol::SimplePosInfo* Arena::CreateMaybeMessage<::Protocol::SimplePosInfo>(Arena*);
template<> ::Protocol::SkillInfo* Arena::CreateMaybeMessage<::Protocol::SkillInfo>(Arena*);
template<> ::Protocol::StatInfo* Arena::CreateMaybeMessage<::Protocol::StatInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class PosInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PosInfo) */ {
 public:
  inline PosInfo() : PosInfo(nullptr) {}
  ~PosInfo() override;
  explicit PROTOBUF_CONSTEXPR PosInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosInfo(const PosInfo& from);
  PosInfo(PosInfo&& from) noexcept
    : PosInfo() {
    *this = ::std::move(from);
  }

  inline PosInfo& operator=(const PosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosInfo& operator=(PosInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PosInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosInfo* internal_default_instance() {
    return reinterpret_cast<const PosInfo*>(
               &_PosInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PosInfo& a, PosInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PosInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PosInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PosInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PosInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PosInfo& from) {
    PosInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PosInfo";
  }
  protected:
  explicit PosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kDestXFieldNumber = 5,
    kDestYFieldNumber = 6,
    kDestZFieldNumber = 7,
    kYawFieldNumber = 8,
    kStateFieldNumber = 9,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float dest_x = 5;
  void clear_dest_x();
  float dest_x() const;
  void set_dest_x(float value);
  private:
  float _internal_dest_x() const;
  void _internal_set_dest_x(float value);
  public:

  // float dest_y = 6;
  void clear_dest_y();
  float dest_y() const;
  void set_dest_y(float value);
  private:
  float _internal_dest_y() const;
  void _internal_set_dest_y(float value);
  public:

  // float dest_z = 7;
  void clear_dest_z();
  float dest_z() const;
  void set_dest_z(float value);
  private:
  float _internal_dest_z() const;
  void _internal_set_dest_z(float value);
  public:

  // float yaw = 8;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // .Protocol.MoveState state = 9;
  void clear_state();
  ::Protocol::MoveState state() const;
  void set_state(::Protocol::MoveState value);
  private:
  ::Protocol::MoveState _internal_state() const;
  void _internal_set_state(::Protocol::MoveState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PosInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    float x_;
    float y_;
    float z_;
    float dest_x_;
    float dest_y_;
    float dest_z_;
    float yaw_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class SimplePosInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SimplePosInfo) */ {
 public:
  inline SimplePosInfo() : SimplePosInfo(nullptr) {}
  ~SimplePosInfo() override;
  explicit PROTOBUF_CONSTEXPR SimplePosInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimplePosInfo(const SimplePosInfo& from);
  SimplePosInfo(SimplePosInfo&& from) noexcept
    : SimplePosInfo() {
    *this = ::std::move(from);
  }

  inline SimplePosInfo& operator=(const SimplePosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimplePosInfo& operator=(SimplePosInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimplePosInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimplePosInfo* internal_default_instance() {
    return reinterpret_cast<const SimplePosInfo*>(
               &_SimplePosInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SimplePosInfo& a, SimplePosInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SimplePosInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimplePosInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimplePosInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimplePosInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimplePosInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimplePosInfo& from) {
    SimplePosInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimplePosInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SimplePosInfo";
  }
  protected:
  explicit SimplePosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SimplePosInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class SkillInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SkillInfo) */ {
 public:
  inline SkillInfo() : SkillInfo(nullptr) {}
  ~SkillInfo() override;
  explicit PROTOBUF_CONSTEXPR SkillInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkillInfo(const SkillInfo& from);
  SkillInfo(SkillInfo&& from) noexcept
    : SkillInfo() {
    *this = ::std::move(from);
  }

  inline SkillInfo& operator=(const SkillInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillInfo& operator=(SkillInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkillInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkillInfo* internal_default_instance() {
    return reinterpret_cast<const SkillInfo*>(
               &_SkillInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SkillInfo& a, SkillInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkillInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkillInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkillInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkillInfo& from) {
    SkillInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SkillInfo";
  }
  protected:
  explicit SkillInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kSkillAttackIdFieldNumber = 2,
    kSkillQIdFieldNumber = 3,
    kSkillWIdFieldNumber = 4,
    kSkillEIdFieldNumber = 5,
    kSkillRIdFieldNumber = 6,
    kSkillDashIdFieldNumber = 7,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // int32 skill_attack_id = 2;
  void clear_skill_attack_id();
  int32_t skill_attack_id() const;
  void set_skill_attack_id(int32_t value);
  private:
  int32_t _internal_skill_attack_id() const;
  void _internal_set_skill_attack_id(int32_t value);
  public:

  // int32 skill_q_id = 3;
  void clear_skill_q_id();
  int32_t skill_q_id() const;
  void set_skill_q_id(int32_t value);
  private:
  int32_t _internal_skill_q_id() const;
  void _internal_set_skill_q_id(int32_t value);
  public:

  // int32 skill_w_id = 4;
  void clear_skill_w_id();
  int32_t skill_w_id() const;
  void set_skill_w_id(int32_t value);
  private:
  int32_t _internal_skill_w_id() const;
  void _internal_set_skill_w_id(int32_t value);
  public:

  // int32 skill_e_id = 5;
  void clear_skill_e_id();
  int32_t skill_e_id() const;
  void set_skill_e_id(int32_t value);
  private:
  int32_t _internal_skill_e_id() const;
  void _internal_set_skill_e_id(int32_t value);
  public:

  // int32 skill_r_id = 6;
  void clear_skill_r_id();
  int32_t skill_r_id() const;
  void set_skill_r_id(int32_t value);
  private:
  int32_t _internal_skill_r_id() const;
  void _internal_set_skill_r_id(int32_t value);
  public:

  // int32 skill_dash_id = 7;
  void clear_skill_dash_id();
  int32_t skill_dash_id() const;
  void set_skill_dash_id(int32_t value);
  private:
  int32_t _internal_skill_dash_id() const;
  void _internal_set_skill_dash_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SkillInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    int32_t skill_attack_id_;
    int32_t skill_q_id_;
    int32_t skill_w_id_;
    int32_t skill_e_id_;
    int32_t skill_r_id_;
    int32_t skill_dash_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ProjectileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ProjectileInfo) */ {
 public:
  inline ProjectileInfo() : ProjectileInfo(nullptr) {}
  ~ProjectileInfo() override;
  explicit PROTOBUF_CONSTEXPR ProjectileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectileInfo(const ProjectileInfo& from);
  ProjectileInfo(ProjectileInfo&& from) noexcept
    : ProjectileInfo() {
    *this = ::std::move(from);
  }

  inline ProjectileInfo& operator=(const ProjectileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectileInfo& operator=(ProjectileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectileInfo* internal_default_instance() {
    return reinterpret_cast<const ProjectileInfo*>(
               &_ProjectileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProjectileInfo& a, ProjectileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectileInfo& from) {
    ProjectileInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ProjectileInfo";
  }
  protected:
  explicit ProjectileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpawnSimplePosInfoFieldNumber = 6,
    kObjectIdFieldNumber = 1,
    kOwnerObjectIdFieldNumber = 2,
    kOwnerSkillIdFieldNumber = 3,
    kOwnerGimmickIdFieldNumber = 4,
    kDataIdFieldNumber = 5,
    kSafeZoneDirFieldNumber = 7,
  };
  // .Protocol.SimplePosInfo spawn_simple_pos_info = 6;
  bool has_spawn_simple_pos_info() const;
  private:
  bool _internal_has_spawn_simple_pos_info() const;
  public:
  void clear_spawn_simple_pos_info();
  const ::Protocol::SimplePosInfo& spawn_simple_pos_info() const;
  PROTOBUF_NODISCARD ::Protocol::SimplePosInfo* release_spawn_simple_pos_info();
  ::Protocol::SimplePosInfo* mutable_spawn_simple_pos_info();
  void set_allocated_spawn_simple_pos_info(::Protocol::SimplePosInfo* spawn_simple_pos_info);
  private:
  const ::Protocol::SimplePosInfo& _internal_spawn_simple_pos_info() const;
  ::Protocol::SimplePosInfo* _internal_mutable_spawn_simple_pos_info();
  public:
  void unsafe_arena_set_allocated_spawn_simple_pos_info(
      ::Protocol::SimplePosInfo* spawn_simple_pos_info);
  ::Protocol::SimplePosInfo* unsafe_arena_release_spawn_simple_pos_info();

  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // uint64 owner_object_id = 2;
  void clear_owner_object_id();
  uint64_t owner_object_id() const;
  void set_owner_object_id(uint64_t value);
  private:
  uint64_t _internal_owner_object_id() const;
  void _internal_set_owner_object_id(uint64_t value);
  public:

  // uint64 owner_skill_id = 3;
  void clear_owner_skill_id();
  uint64_t owner_skill_id() const;
  void set_owner_skill_id(uint64_t value);
  private:
  uint64_t _internal_owner_skill_id() const;
  void _internal_set_owner_skill_id(uint64_t value);
  public:

  // uint64 owner_gimmick_id = 4;
  void clear_owner_gimmick_id();
  uint64_t owner_gimmick_id() const;
  void set_owner_gimmick_id(uint64_t value);
  private:
  uint64_t _internal_owner_gimmick_id() const;
  void _internal_set_owner_gimmick_id(uint64_t value);
  public:

  // int32 data_id = 5;
  void clear_data_id();
  int32_t data_id() const;
  void set_data_id(int32_t value);
  private:
  int32_t _internal_data_id() const;
  void _internal_set_data_id(int32_t value);
  public:

  // .Protocol.Direction safe_zone_dir = 7;
  void clear_safe_zone_dir();
  ::Protocol::Direction safe_zone_dir() const;
  void set_safe_zone_dir(::Protocol::Direction value);
  private:
  ::Protocol::Direction _internal_safe_zone_dir() const;
  void _internal_set_safe_zone_dir(::Protocol::Direction value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ProjectileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SimplePosInfo* spawn_simple_pos_info_;
    uint64_t object_id_;
    uint64_t owner_object_id_;
    uint64_t owner_skill_id_;
    uint64_t owner_gimmick_id_;
    int32_t data_id_;
    int safe_zone_dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class StatInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.StatInfo) */ {
 public:
  inline StatInfo() : StatInfo(nullptr) {}
  ~StatInfo() override;
  explicit PROTOBUF_CONSTEXPR StatInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatInfo(const StatInfo& from);
  StatInfo(StatInfo&& from) noexcept
    : StatInfo() {
    *this = ::std::move(from);
  }

  inline StatInfo& operator=(const StatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatInfo& operator=(StatInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatInfo* internal_default_instance() {
    return reinterpret_cast<const StatInfo*>(
               &_StatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StatInfo& a, StatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StatInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatInfo& from) {
    StatInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.StatInfo";
  }
  protected:
  explicit StatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kHpFieldNumber = 2,
    kMaxHpFieldNumber = 3,
    kAtkFieldNumber = 4,
    kDefFieldNumber = 5,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // float hp = 2;
  void clear_hp();
  float hp() const;
  void set_hp(float value);
  private:
  float _internal_hp() const;
  void _internal_set_hp(float value);
  public:

  // float max_hp = 3;
  void clear_max_hp();
  float max_hp() const;
  void set_max_hp(float value);
  private:
  float _internal_max_hp() const;
  void _internal_set_max_hp(float value);
  public:

  // float atk = 4;
  void clear_atk();
  float atk() const;
  void set_atk(float value);
  private:
  float _internal_atk() const;
  void _internal_set_atk(float value);
  public:

  // float def = 5;
  void clear_def();
  float def() const;
  void set_def(float value);
  private:
  float _internal_def() const;
  void _internal_set_def(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.StatInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    float hp_;
    float max_hp_;
    float atk_;
    float def_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class BuffInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.BuffInfo) */ {
 public:
  inline BuffInfo() : BuffInfo(nullptr) {}
  ~BuffInfo() override;
  explicit PROTOBUF_CONSTEXPR BuffInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuffInfo(const BuffInfo& from);
  BuffInfo(BuffInfo&& from) noexcept
    : BuffInfo() {
    *this = ::std::move(from);
  }

  inline BuffInfo& operator=(const BuffInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuffInfo& operator=(BuffInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuffInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuffInfo* internal_default_instance() {
    return reinterpret_cast<const BuffInfo*>(
               &_BuffInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BuffInfo& a, BuffInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BuffInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuffInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuffInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuffInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuffInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BuffInfo& from) {
    BuffInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuffInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.BuffInfo";
  }
  protected:
  explicit BuffInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerObjectIdFieldNumber = 1,
    kGiverObjectIdFieldNumber = 2,
    kTemplateIdFieldNumber = 3,
  };
  // uint64 owner_object_id = 1;
  void clear_owner_object_id();
  uint64_t owner_object_id() const;
  void set_owner_object_id(uint64_t value);
  private:
  uint64_t _internal_owner_object_id() const;
  void _internal_set_owner_object_id(uint64_t value);
  public:

  // uint64 giver_object_id = 2;
  void clear_giver_object_id();
  uint64_t giver_object_id() const;
  void set_giver_object_id(uint64_t value);
  private:
  uint64_t _internal_giver_object_id() const;
  void _internal_set_giver_object_id(uint64_t value);
  public:

  // int32 template_id = 3;
  void clear_template_id();
  int32_t template_id() const;
  void set_template_id(int32_t value);
  private:
  int32_t _internal_template_id() const;
  void _internal_set_template_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.BuffInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t owner_object_id_;
    uint64_t giver_object_id_;
    int32_t template_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectInfo& from) {
    ObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 4,
    kStatInfoFieldNumber = 5,
    kSkillInfoFieldNumber = 7,
    kProjectileInfoFieldNumber = 10,
    kObjectIdFieldNumber = 1,
    kTemplateIdFieldNumber = 2,
    kObjectTypeFieldNumber = 3,
    kCreatureTypeFieldNumber = 6,
    kMonsterTypeFieldNumber = 8,
    kProjectileTypeFieldNumber = 9,
    kEnvTypeFieldNumber = 11,
  };
  // .Protocol.PosInfo pos_info = 4;
  bool has_pos_info() const;
  private:
  bool _internal_has_pos_info() const;
  public:
  void clear_pos_info();
  const ::Protocol::PosInfo& pos_info() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_pos_info();
  ::Protocol::PosInfo* mutable_pos_info();
  void set_allocated_pos_info(::Protocol::PosInfo* pos_info);
  private:
  const ::Protocol::PosInfo& _internal_pos_info() const;
  ::Protocol::PosInfo* _internal_mutable_pos_info();
  public:
  void unsafe_arena_set_allocated_pos_info(
      ::Protocol::PosInfo* pos_info);
  ::Protocol::PosInfo* unsafe_arena_release_pos_info();

  // .Protocol.StatInfo stat_info = 5;
  bool has_stat_info() const;
  private:
  bool _internal_has_stat_info() const;
  public:
  void clear_stat_info();
  const ::Protocol::StatInfo& stat_info() const;
  PROTOBUF_NODISCARD ::Protocol::StatInfo* release_stat_info();
  ::Protocol::StatInfo* mutable_stat_info();
  void set_allocated_stat_info(::Protocol::StatInfo* stat_info);
  private:
  const ::Protocol::StatInfo& _internal_stat_info() const;
  ::Protocol::StatInfo* _internal_mutable_stat_info();
  public:
  void unsafe_arena_set_allocated_stat_info(
      ::Protocol::StatInfo* stat_info);
  ::Protocol::StatInfo* unsafe_arena_release_stat_info();

  // .Protocol.SkillInfo skill_info = 7;
  bool has_skill_info() const;
  private:
  bool _internal_has_skill_info() const;
  public:
  void clear_skill_info();
  const ::Protocol::SkillInfo& skill_info() const;
  PROTOBUF_NODISCARD ::Protocol::SkillInfo* release_skill_info();
  ::Protocol::SkillInfo* mutable_skill_info();
  void set_allocated_skill_info(::Protocol::SkillInfo* skill_info);
  private:
  const ::Protocol::SkillInfo& _internal_skill_info() const;
  ::Protocol::SkillInfo* _internal_mutable_skill_info();
  public:
  void unsafe_arena_set_allocated_skill_info(
      ::Protocol::SkillInfo* skill_info);
  ::Protocol::SkillInfo* unsafe_arena_release_skill_info();

  // .Protocol.ProjectileInfo projectile_info = 10;
  bool has_projectile_info() const;
  private:
  bool _internal_has_projectile_info() const;
  public:
  void clear_projectile_info();
  const ::Protocol::ProjectileInfo& projectile_info() const;
  PROTOBUF_NODISCARD ::Protocol::ProjectileInfo* release_projectile_info();
  ::Protocol::ProjectileInfo* mutable_projectile_info();
  void set_allocated_projectile_info(::Protocol::ProjectileInfo* projectile_info);
  private:
  const ::Protocol::ProjectileInfo& _internal_projectile_info() const;
  ::Protocol::ProjectileInfo* _internal_mutable_projectile_info();
  public:
  void unsafe_arena_set_allocated_projectile_info(
      ::Protocol::ProjectileInfo* projectile_info);
  ::Protocol::ProjectileInfo* unsafe_arena_release_projectile_info();

  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // int32 template_id = 2;
  void clear_template_id();
  int32_t template_id() const;
  void set_template_id(int32_t value);
  private:
  int32_t _internal_template_id() const;
  void _internal_set_template_id(int32_t value);
  public:

  // .Protocol.ObjectType object_type = 3;
  void clear_object_type();
  ::Protocol::ObjectType object_type() const;
  void set_object_type(::Protocol::ObjectType value);
  private:
  ::Protocol::ObjectType _internal_object_type() const;
  void _internal_set_object_type(::Protocol::ObjectType value);
  public:

  // .Protocol.CreatureType creature_type = 6;
  void clear_creature_type();
  ::Protocol::CreatureType creature_type() const;
  void set_creature_type(::Protocol::CreatureType value);
  private:
  ::Protocol::CreatureType _internal_creature_type() const;
  void _internal_set_creature_type(::Protocol::CreatureType value);
  public:

  // .Protocol.MonsterType monster_type = 8;
  void clear_monster_type();
  ::Protocol::MonsterType monster_type() const;
  void set_monster_type(::Protocol::MonsterType value);
  private:
  ::Protocol::MonsterType _internal_monster_type() const;
  void _internal_set_monster_type(::Protocol::MonsterType value);
  public:

  // .Protocol.ProjectileType projectile_type = 9;
  void clear_projectile_type();
  ::Protocol::ProjectileType projectile_type() const;
  void set_projectile_type(::Protocol::ProjectileType value);
  private:
  ::Protocol::ProjectileType _internal_projectile_type() const;
  void _internal_set_projectile_type(::Protocol::ProjectileType value);
  public:

  // .Protocol.EnvType env_type = 11;
  void clear_env_type();
  ::Protocol::EnvType env_type() const;
  void set_env_type(::Protocol::EnvType value);
  private:
  ::Protocol::EnvType _internal_env_type() const;
  void _internal_set_env_type(::Protocol::EnvType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* pos_info_;
    ::Protocol::StatInfo* stat_info_;
    ::Protocol::SkillInfo* skill_info_;
    ::Protocol::ProjectileInfo* projectile_info_;
    uint64_t object_id_;
    int32_t template_id_;
    int object_type_;
    int creature_type_;
    int monster_type_;
    int projectile_type_;
    int env_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ItemInfo) */ {
 public:
  inline ItemInfo() : ItemInfo(nullptr) {}
  ~ItemInfo() override;
  explicit PROTOBUF_CONSTEXPR ItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemInfo(const ItemInfo& from);
  ItemInfo(ItemInfo&& from) noexcept
    : ItemInfo() {
    *this = ::std::move(from);
  }

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemInfo& operator=(ItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemInfo* internal_default_instance() {
    return reinterpret_cast<const ItemInfo*>(
               &_ItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ItemInfo& a, ItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemInfo& from) {
    ItemInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ItemInfo";
  }
  protected:
  explicit ItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kTemplateIdFieldNumber = 2,
    kItemSlotTypeFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // uint64 item_id = 1;
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // int32 template_id = 2;
  void clear_template_id();
  int32_t template_id() const;
  void set_template_id(int32_t value);
  private:
  int32_t _internal_template_id() const;
  void _internal_set_template_id(int32_t value);
  public:

  // .Protocol.ItemSlotType item_slot_type = 3;
  void clear_item_slot_type();
  ::Protocol::ItemSlotType item_slot_type() const;
  void set_item_slot_type(::Protocol::ItemSlotType value);
  private:
  ::Protocol::ItemSlotType _internal_item_slot_type() const;
  void _internal_set_item_slot_type(::Protocol::ItemSlotType value);
  public:

  // int32 count = 4;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t item_id_;
    int32_t template_id_;
    int item_slot_type_;
    int32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PosInfo

// uint64 object_id = 1;
inline void PosInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t PosInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t PosInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.object_id)
  return _internal_object_id();
}
inline void PosInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void PosInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.object_id)
}

// float x = 2;
inline void PosInfo::clear_x() {
  _impl_.x_ = 0;
}
inline float PosInfo::_internal_x() const {
  return _impl_.x_;
}
inline float PosInfo::x() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.x)
  return _internal_x();
}
inline void PosInfo::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PosInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.x)
}

// float y = 3;
inline void PosInfo::clear_y() {
  _impl_.y_ = 0;
}
inline float PosInfo::_internal_y() const {
  return _impl_.y_;
}
inline float PosInfo::y() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.y)
  return _internal_y();
}
inline void PosInfo::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PosInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.y)
}

// float z = 4;
inline void PosInfo::clear_z() {
  _impl_.z_ = 0;
}
inline float PosInfo::_internal_z() const {
  return _impl_.z_;
}
inline float PosInfo::z() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.z)
  return _internal_z();
}
inline void PosInfo::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void PosInfo::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.z)
}

// float dest_x = 5;
inline void PosInfo::clear_dest_x() {
  _impl_.dest_x_ = 0;
}
inline float PosInfo::_internal_dest_x() const {
  return _impl_.dest_x_;
}
inline float PosInfo::dest_x() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.dest_x)
  return _internal_dest_x();
}
inline void PosInfo::_internal_set_dest_x(float value) {
  
  _impl_.dest_x_ = value;
}
inline void PosInfo::set_dest_x(float value) {
  _internal_set_dest_x(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.dest_x)
}

// float dest_y = 6;
inline void PosInfo::clear_dest_y() {
  _impl_.dest_y_ = 0;
}
inline float PosInfo::_internal_dest_y() const {
  return _impl_.dest_y_;
}
inline float PosInfo::dest_y() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.dest_y)
  return _internal_dest_y();
}
inline void PosInfo::_internal_set_dest_y(float value) {
  
  _impl_.dest_y_ = value;
}
inline void PosInfo::set_dest_y(float value) {
  _internal_set_dest_y(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.dest_y)
}

// float dest_z = 7;
inline void PosInfo::clear_dest_z() {
  _impl_.dest_z_ = 0;
}
inline float PosInfo::_internal_dest_z() const {
  return _impl_.dest_z_;
}
inline float PosInfo::dest_z() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.dest_z)
  return _internal_dest_z();
}
inline void PosInfo::_internal_set_dest_z(float value) {
  
  _impl_.dest_z_ = value;
}
inline void PosInfo::set_dest_z(float value) {
  _internal_set_dest_z(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.dest_z)
}

// float yaw = 8;
inline void PosInfo::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float PosInfo::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float PosInfo::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.yaw)
  return _internal_yaw();
}
inline void PosInfo::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void PosInfo::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.yaw)
}

// .Protocol.MoveState state = 9;
inline void PosInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::MoveState PosInfo::_internal_state() const {
  return static_cast< ::Protocol::MoveState >(_impl_.state_);
}
inline ::Protocol::MoveState PosInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.state)
  return _internal_state();
}
inline void PosInfo::_internal_set_state(::Protocol::MoveState value) {
  
  _impl_.state_ = value;
}
inline void PosInfo::set_state(::Protocol::MoveState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.state)
}

// -------------------------------------------------------------------

// SimplePosInfo

// float x = 1;
inline void SimplePosInfo::clear_x() {
  _impl_.x_ = 0;
}
inline float SimplePosInfo::_internal_x() const {
  return _impl_.x_;
}
inline float SimplePosInfo::x() const {
  // @@protoc_insertion_point(field_get:Protocol.SimplePosInfo.x)
  return _internal_x();
}
inline void SimplePosInfo::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void SimplePosInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.SimplePosInfo.x)
}

// float y = 2;
inline void SimplePosInfo::clear_y() {
  _impl_.y_ = 0;
}
inline float SimplePosInfo::_internal_y() const {
  return _impl_.y_;
}
inline float SimplePosInfo::y() const {
  // @@protoc_insertion_point(field_get:Protocol.SimplePosInfo.y)
  return _internal_y();
}
inline void SimplePosInfo::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void SimplePosInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.SimplePosInfo.y)
}

// float z = 3;
inline void SimplePosInfo::clear_z() {
  _impl_.z_ = 0;
}
inline float SimplePosInfo::_internal_z() const {
  return _impl_.z_;
}
inline float SimplePosInfo::z() const {
  // @@protoc_insertion_point(field_get:Protocol.SimplePosInfo.z)
  return _internal_z();
}
inline void SimplePosInfo::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void SimplePosInfo::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.SimplePosInfo.z)
}

// -------------------------------------------------------------------

// SkillInfo

// uint64 object_id = 1;
inline void SkillInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t SkillInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t SkillInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.object_id)
  return _internal_object_id();
}
inline void SkillInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void SkillInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.object_id)
}

// int32 skill_attack_id = 2;
inline void SkillInfo::clear_skill_attack_id() {
  _impl_.skill_attack_id_ = 0;
}
inline int32_t SkillInfo::_internal_skill_attack_id() const {
  return _impl_.skill_attack_id_;
}
inline int32_t SkillInfo::skill_attack_id() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.skill_attack_id)
  return _internal_skill_attack_id();
}
inline void SkillInfo::_internal_set_skill_attack_id(int32_t value) {
  
  _impl_.skill_attack_id_ = value;
}
inline void SkillInfo::set_skill_attack_id(int32_t value) {
  _internal_set_skill_attack_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.skill_attack_id)
}

// int32 skill_q_id = 3;
inline void SkillInfo::clear_skill_q_id() {
  _impl_.skill_q_id_ = 0;
}
inline int32_t SkillInfo::_internal_skill_q_id() const {
  return _impl_.skill_q_id_;
}
inline int32_t SkillInfo::skill_q_id() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.skill_q_id)
  return _internal_skill_q_id();
}
inline void SkillInfo::_internal_set_skill_q_id(int32_t value) {
  
  _impl_.skill_q_id_ = value;
}
inline void SkillInfo::set_skill_q_id(int32_t value) {
  _internal_set_skill_q_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.skill_q_id)
}

// int32 skill_w_id = 4;
inline void SkillInfo::clear_skill_w_id() {
  _impl_.skill_w_id_ = 0;
}
inline int32_t SkillInfo::_internal_skill_w_id() const {
  return _impl_.skill_w_id_;
}
inline int32_t SkillInfo::skill_w_id() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.skill_w_id)
  return _internal_skill_w_id();
}
inline void SkillInfo::_internal_set_skill_w_id(int32_t value) {
  
  _impl_.skill_w_id_ = value;
}
inline void SkillInfo::set_skill_w_id(int32_t value) {
  _internal_set_skill_w_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.skill_w_id)
}

// int32 skill_e_id = 5;
inline void SkillInfo::clear_skill_e_id() {
  _impl_.skill_e_id_ = 0;
}
inline int32_t SkillInfo::_internal_skill_e_id() const {
  return _impl_.skill_e_id_;
}
inline int32_t SkillInfo::skill_e_id() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.skill_e_id)
  return _internal_skill_e_id();
}
inline void SkillInfo::_internal_set_skill_e_id(int32_t value) {
  
  _impl_.skill_e_id_ = value;
}
inline void SkillInfo::set_skill_e_id(int32_t value) {
  _internal_set_skill_e_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.skill_e_id)
}

// int32 skill_r_id = 6;
inline void SkillInfo::clear_skill_r_id() {
  _impl_.skill_r_id_ = 0;
}
inline int32_t SkillInfo::_internal_skill_r_id() const {
  return _impl_.skill_r_id_;
}
inline int32_t SkillInfo::skill_r_id() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.skill_r_id)
  return _internal_skill_r_id();
}
inline void SkillInfo::_internal_set_skill_r_id(int32_t value) {
  
  _impl_.skill_r_id_ = value;
}
inline void SkillInfo::set_skill_r_id(int32_t value) {
  _internal_set_skill_r_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.skill_r_id)
}

// int32 skill_dash_id = 7;
inline void SkillInfo::clear_skill_dash_id() {
  _impl_.skill_dash_id_ = 0;
}
inline int32_t SkillInfo::_internal_skill_dash_id() const {
  return _impl_.skill_dash_id_;
}
inline int32_t SkillInfo::skill_dash_id() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.skill_dash_id)
  return _internal_skill_dash_id();
}
inline void SkillInfo::_internal_set_skill_dash_id(int32_t value) {
  
  _impl_.skill_dash_id_ = value;
}
inline void SkillInfo::set_skill_dash_id(int32_t value) {
  _internal_set_skill_dash_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.skill_dash_id)
}

// -------------------------------------------------------------------

// ProjectileInfo

// uint64 object_id = 1;
inline void ProjectileInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t ProjectileInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t ProjectileInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.object_id)
  return _internal_object_id();
}
inline void ProjectileInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void ProjectileInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.object_id)
}

// uint64 owner_object_id = 2;
inline void ProjectileInfo::clear_owner_object_id() {
  _impl_.owner_object_id_ = uint64_t{0u};
}
inline uint64_t ProjectileInfo::_internal_owner_object_id() const {
  return _impl_.owner_object_id_;
}
inline uint64_t ProjectileInfo::owner_object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.owner_object_id)
  return _internal_owner_object_id();
}
inline void ProjectileInfo::_internal_set_owner_object_id(uint64_t value) {
  
  _impl_.owner_object_id_ = value;
}
inline void ProjectileInfo::set_owner_object_id(uint64_t value) {
  _internal_set_owner_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.owner_object_id)
}

// uint64 owner_skill_id = 3;
inline void ProjectileInfo::clear_owner_skill_id() {
  _impl_.owner_skill_id_ = uint64_t{0u};
}
inline uint64_t ProjectileInfo::_internal_owner_skill_id() const {
  return _impl_.owner_skill_id_;
}
inline uint64_t ProjectileInfo::owner_skill_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.owner_skill_id)
  return _internal_owner_skill_id();
}
inline void ProjectileInfo::_internal_set_owner_skill_id(uint64_t value) {
  
  _impl_.owner_skill_id_ = value;
}
inline void ProjectileInfo::set_owner_skill_id(uint64_t value) {
  _internal_set_owner_skill_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.owner_skill_id)
}

// uint64 owner_gimmick_id = 4;
inline void ProjectileInfo::clear_owner_gimmick_id() {
  _impl_.owner_gimmick_id_ = uint64_t{0u};
}
inline uint64_t ProjectileInfo::_internal_owner_gimmick_id() const {
  return _impl_.owner_gimmick_id_;
}
inline uint64_t ProjectileInfo::owner_gimmick_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.owner_gimmick_id)
  return _internal_owner_gimmick_id();
}
inline void ProjectileInfo::_internal_set_owner_gimmick_id(uint64_t value) {
  
  _impl_.owner_gimmick_id_ = value;
}
inline void ProjectileInfo::set_owner_gimmick_id(uint64_t value) {
  _internal_set_owner_gimmick_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.owner_gimmick_id)
}

// int32 data_id = 5;
inline void ProjectileInfo::clear_data_id() {
  _impl_.data_id_ = 0;
}
inline int32_t ProjectileInfo::_internal_data_id() const {
  return _impl_.data_id_;
}
inline int32_t ProjectileInfo::data_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.data_id)
  return _internal_data_id();
}
inline void ProjectileInfo::_internal_set_data_id(int32_t value) {
  
  _impl_.data_id_ = value;
}
inline void ProjectileInfo::set_data_id(int32_t value) {
  _internal_set_data_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.data_id)
}

// .Protocol.SimplePosInfo spawn_simple_pos_info = 6;
inline bool ProjectileInfo::_internal_has_spawn_simple_pos_info() const {
  return this != internal_default_instance() && _impl_.spawn_simple_pos_info_ != nullptr;
}
inline bool ProjectileInfo::has_spawn_simple_pos_info() const {
  return _internal_has_spawn_simple_pos_info();
}
inline void ProjectileInfo::clear_spawn_simple_pos_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.spawn_simple_pos_info_ != nullptr) {
    delete _impl_.spawn_simple_pos_info_;
  }
  _impl_.spawn_simple_pos_info_ = nullptr;
}
inline const ::Protocol::SimplePosInfo& ProjectileInfo::_internal_spawn_simple_pos_info() const {
  const ::Protocol::SimplePosInfo* p = _impl_.spawn_simple_pos_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SimplePosInfo&>(
      ::Protocol::_SimplePosInfo_default_instance_);
}
inline const ::Protocol::SimplePosInfo& ProjectileInfo::spawn_simple_pos_info() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.spawn_simple_pos_info)
  return _internal_spawn_simple_pos_info();
}
inline void ProjectileInfo::unsafe_arena_set_allocated_spawn_simple_pos_info(
    ::Protocol::SimplePosInfo* spawn_simple_pos_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spawn_simple_pos_info_);
  }
  _impl_.spawn_simple_pos_info_ = spawn_simple_pos_info;
  if (spawn_simple_pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ProjectileInfo.spawn_simple_pos_info)
}
inline ::Protocol::SimplePosInfo* ProjectileInfo::release_spawn_simple_pos_info() {
  
  ::Protocol::SimplePosInfo* temp = _impl_.spawn_simple_pos_info_;
  _impl_.spawn_simple_pos_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SimplePosInfo* ProjectileInfo::unsafe_arena_release_spawn_simple_pos_info() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileInfo.spawn_simple_pos_info)
  
  ::Protocol::SimplePosInfo* temp = _impl_.spawn_simple_pos_info_;
  _impl_.spawn_simple_pos_info_ = nullptr;
  return temp;
}
inline ::Protocol::SimplePosInfo* ProjectileInfo::_internal_mutable_spawn_simple_pos_info() {
  
  if (_impl_.spawn_simple_pos_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SimplePosInfo>(GetArenaForAllocation());
    _impl_.spawn_simple_pos_info_ = p;
  }
  return _impl_.spawn_simple_pos_info_;
}
inline ::Protocol::SimplePosInfo* ProjectileInfo::mutable_spawn_simple_pos_info() {
  ::Protocol::SimplePosInfo* _msg = _internal_mutable_spawn_simple_pos_info();
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileInfo.spawn_simple_pos_info)
  return _msg;
}
inline void ProjectileInfo::set_allocated_spawn_simple_pos_info(::Protocol::SimplePosInfo* spawn_simple_pos_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spawn_simple_pos_info_;
  }
  if (spawn_simple_pos_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spawn_simple_pos_info);
    if (message_arena != submessage_arena) {
      spawn_simple_pos_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spawn_simple_pos_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spawn_simple_pos_info_ = spawn_simple_pos_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileInfo.spawn_simple_pos_info)
}

// .Protocol.Direction safe_zone_dir = 7;
inline void ProjectileInfo::clear_safe_zone_dir() {
  _impl_.safe_zone_dir_ = 0;
}
inline ::Protocol::Direction ProjectileInfo::_internal_safe_zone_dir() const {
  return static_cast< ::Protocol::Direction >(_impl_.safe_zone_dir_);
}
inline ::Protocol::Direction ProjectileInfo::safe_zone_dir() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.safe_zone_dir)
  return _internal_safe_zone_dir();
}
inline void ProjectileInfo::_internal_set_safe_zone_dir(::Protocol::Direction value) {
  
  _impl_.safe_zone_dir_ = value;
}
inline void ProjectileInfo::set_safe_zone_dir(::Protocol::Direction value) {
  _internal_set_safe_zone_dir(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.safe_zone_dir)
}

// -------------------------------------------------------------------

// StatInfo

// uint64 object_id = 1;
inline void StatInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t StatInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t StatInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.object_id)
  return _internal_object_id();
}
inline void StatInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void StatInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.object_id)
}

// float hp = 2;
inline void StatInfo::clear_hp() {
  _impl_.hp_ = 0;
}
inline float StatInfo::_internal_hp() const {
  return _impl_.hp_;
}
inline float StatInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.hp)
  return _internal_hp();
}
inline void StatInfo::_internal_set_hp(float value) {
  
  _impl_.hp_ = value;
}
inline void StatInfo::set_hp(float value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.hp)
}

// float max_hp = 3;
inline void StatInfo::clear_max_hp() {
  _impl_.max_hp_ = 0;
}
inline float StatInfo::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline float StatInfo::max_hp() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.max_hp)
  return _internal_max_hp();
}
inline void StatInfo::_internal_set_max_hp(float value) {
  
  _impl_.max_hp_ = value;
}
inline void StatInfo::set_max_hp(float value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.max_hp)
}

// float atk = 4;
inline void StatInfo::clear_atk() {
  _impl_.atk_ = 0;
}
inline float StatInfo::_internal_atk() const {
  return _impl_.atk_;
}
inline float StatInfo::atk() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.atk)
  return _internal_atk();
}
inline void StatInfo::_internal_set_atk(float value) {
  
  _impl_.atk_ = value;
}
inline void StatInfo::set_atk(float value) {
  _internal_set_atk(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.atk)
}

// float def = 5;
inline void StatInfo::clear_def() {
  _impl_.def_ = 0;
}
inline float StatInfo::_internal_def() const {
  return _impl_.def_;
}
inline float StatInfo::def() const {
  // @@protoc_insertion_point(field_get:Protocol.StatInfo.def)
  return _internal_def();
}
inline void StatInfo::_internal_set_def(float value) {
  
  _impl_.def_ = value;
}
inline void StatInfo::set_def(float value) {
  _internal_set_def(value);
  // @@protoc_insertion_point(field_set:Protocol.StatInfo.def)
}

// -------------------------------------------------------------------

// BuffInfo

// uint64 owner_object_id = 1;
inline void BuffInfo::clear_owner_object_id() {
  _impl_.owner_object_id_ = uint64_t{0u};
}
inline uint64_t BuffInfo::_internal_owner_object_id() const {
  return _impl_.owner_object_id_;
}
inline uint64_t BuffInfo::owner_object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.BuffInfo.owner_object_id)
  return _internal_owner_object_id();
}
inline void BuffInfo::_internal_set_owner_object_id(uint64_t value) {
  
  _impl_.owner_object_id_ = value;
}
inline void BuffInfo::set_owner_object_id(uint64_t value) {
  _internal_set_owner_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.BuffInfo.owner_object_id)
}

// uint64 giver_object_id = 2;
inline void BuffInfo::clear_giver_object_id() {
  _impl_.giver_object_id_ = uint64_t{0u};
}
inline uint64_t BuffInfo::_internal_giver_object_id() const {
  return _impl_.giver_object_id_;
}
inline uint64_t BuffInfo::giver_object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.BuffInfo.giver_object_id)
  return _internal_giver_object_id();
}
inline void BuffInfo::_internal_set_giver_object_id(uint64_t value) {
  
  _impl_.giver_object_id_ = value;
}
inline void BuffInfo::set_giver_object_id(uint64_t value) {
  _internal_set_giver_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.BuffInfo.giver_object_id)
}

// int32 template_id = 3;
inline void BuffInfo::clear_template_id() {
  _impl_.template_id_ = 0;
}
inline int32_t BuffInfo::_internal_template_id() const {
  return _impl_.template_id_;
}
inline int32_t BuffInfo::template_id() const {
  // @@protoc_insertion_point(field_get:Protocol.BuffInfo.template_id)
  return _internal_template_id();
}
inline void BuffInfo::_internal_set_template_id(int32_t value) {
  
  _impl_.template_id_ = value;
}
inline void BuffInfo::set_template_id(int32_t value) {
  _internal_set_template_id(value);
  // @@protoc_insertion_point(field_set:Protocol.BuffInfo.template_id)
}

// -------------------------------------------------------------------

// ObjectInfo

// uint64 object_id = 1;
inline void ObjectInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t ObjectInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t ObjectInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.object_id)
  return _internal_object_id();
}
inline void ObjectInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void ObjectInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.object_id)
}

// int32 template_id = 2;
inline void ObjectInfo::clear_template_id() {
  _impl_.template_id_ = 0;
}
inline int32_t ObjectInfo::_internal_template_id() const {
  return _impl_.template_id_;
}
inline int32_t ObjectInfo::template_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.template_id)
  return _internal_template_id();
}
inline void ObjectInfo::_internal_set_template_id(int32_t value) {
  
  _impl_.template_id_ = value;
}
inline void ObjectInfo::set_template_id(int32_t value) {
  _internal_set_template_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.template_id)
}

// .Protocol.ObjectType object_type = 3;
inline void ObjectInfo::clear_object_type() {
  _impl_.object_type_ = 0;
}
inline ::Protocol::ObjectType ObjectInfo::_internal_object_type() const {
  return static_cast< ::Protocol::ObjectType >(_impl_.object_type_);
}
inline ::Protocol::ObjectType ObjectInfo::object_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.object_type)
  return _internal_object_type();
}
inline void ObjectInfo::_internal_set_object_type(::Protocol::ObjectType value) {
  
  _impl_.object_type_ = value;
}
inline void ObjectInfo::set_object_type(::Protocol::ObjectType value) {
  _internal_set_object_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.object_type)
}

// .Protocol.PosInfo pos_info = 4;
inline bool ObjectInfo::_internal_has_pos_info() const {
  return this != internal_default_instance() && _impl_.pos_info_ != nullptr;
}
inline bool ObjectInfo::has_pos_info() const {
  return _internal_has_pos_info();
}
inline void ObjectInfo::clear_pos_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
}
inline const ::Protocol::PosInfo& ObjectInfo::_internal_pos_info() const {
  const ::Protocol::PosInfo* p = _impl_.pos_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& ObjectInfo::pos_info() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.pos_info)
  return _internal_pos_info();
}
inline void ObjectInfo::unsafe_arena_set_allocated_pos_info(
    ::Protocol::PosInfo* pos_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_info_);
  }
  _impl_.pos_info_ = pos_info;
  if (pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.pos_info)
}
inline ::Protocol::PosInfo* ObjectInfo::release_pos_info() {
  
  ::Protocol::PosInfo* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* ObjectInfo::unsafe_arena_release_pos_info() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.pos_info)
  
  ::Protocol::PosInfo* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* ObjectInfo::_internal_mutable_pos_info() {
  
  if (_impl_.pos_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.pos_info_ = p;
  }
  return _impl_.pos_info_;
}
inline ::Protocol::PosInfo* ObjectInfo::mutable_pos_info() {
  ::Protocol::PosInfo* _msg = _internal_mutable_pos_info();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.pos_info)
  return _msg;
}
inline void ObjectInfo::set_allocated_pos_info(::Protocol::PosInfo* pos_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_info_;
  }
  if (pos_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos_info);
    if (message_arena != submessage_arena) {
      pos_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_info_ = pos_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.pos_info)
}

// .Protocol.StatInfo stat_info = 5;
inline bool ObjectInfo::_internal_has_stat_info() const {
  return this != internal_default_instance() && _impl_.stat_info_ != nullptr;
}
inline bool ObjectInfo::has_stat_info() const {
  return _internal_has_stat_info();
}
inline void ObjectInfo::clear_stat_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.stat_info_ != nullptr) {
    delete _impl_.stat_info_;
  }
  _impl_.stat_info_ = nullptr;
}
inline const ::Protocol::StatInfo& ObjectInfo::_internal_stat_info() const {
  const ::Protocol::StatInfo* p = _impl_.stat_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::StatInfo&>(
      ::Protocol::_StatInfo_default_instance_);
}
inline const ::Protocol::StatInfo& ObjectInfo::stat_info() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.stat_info)
  return _internal_stat_info();
}
inline void ObjectInfo::unsafe_arena_set_allocated_stat_info(
    ::Protocol::StatInfo* stat_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stat_info_);
  }
  _impl_.stat_info_ = stat_info;
  if (stat_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.stat_info)
}
inline ::Protocol::StatInfo* ObjectInfo::release_stat_info() {
  
  ::Protocol::StatInfo* temp = _impl_.stat_info_;
  _impl_.stat_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::StatInfo* ObjectInfo::unsafe_arena_release_stat_info() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.stat_info)
  
  ::Protocol::StatInfo* temp = _impl_.stat_info_;
  _impl_.stat_info_ = nullptr;
  return temp;
}
inline ::Protocol::StatInfo* ObjectInfo::_internal_mutable_stat_info() {
  
  if (_impl_.stat_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::StatInfo>(GetArenaForAllocation());
    _impl_.stat_info_ = p;
  }
  return _impl_.stat_info_;
}
inline ::Protocol::StatInfo* ObjectInfo::mutable_stat_info() {
  ::Protocol::StatInfo* _msg = _internal_mutable_stat_info();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.stat_info)
  return _msg;
}
inline void ObjectInfo::set_allocated_stat_info(::Protocol::StatInfo* stat_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stat_info_;
  }
  if (stat_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stat_info);
    if (message_arena != submessage_arena) {
      stat_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stat_info_ = stat_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.stat_info)
}

// .Protocol.CreatureType creature_type = 6;
inline void ObjectInfo::clear_creature_type() {
  _impl_.creature_type_ = 0;
}
inline ::Protocol::CreatureType ObjectInfo::_internal_creature_type() const {
  return static_cast< ::Protocol::CreatureType >(_impl_.creature_type_);
}
inline ::Protocol::CreatureType ObjectInfo::creature_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.creature_type)
  return _internal_creature_type();
}
inline void ObjectInfo::_internal_set_creature_type(::Protocol::CreatureType value) {
  
  _impl_.creature_type_ = value;
}
inline void ObjectInfo::set_creature_type(::Protocol::CreatureType value) {
  _internal_set_creature_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.creature_type)
}

// .Protocol.SkillInfo skill_info = 7;
inline bool ObjectInfo::_internal_has_skill_info() const {
  return this != internal_default_instance() && _impl_.skill_info_ != nullptr;
}
inline bool ObjectInfo::has_skill_info() const {
  return _internal_has_skill_info();
}
inline void ObjectInfo::clear_skill_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.skill_info_ != nullptr) {
    delete _impl_.skill_info_;
  }
  _impl_.skill_info_ = nullptr;
}
inline const ::Protocol::SkillInfo& ObjectInfo::_internal_skill_info() const {
  const ::Protocol::SkillInfo* p = _impl_.skill_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SkillInfo&>(
      ::Protocol::_SkillInfo_default_instance_);
}
inline const ::Protocol::SkillInfo& ObjectInfo::skill_info() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.skill_info)
  return _internal_skill_info();
}
inline void ObjectInfo::unsafe_arena_set_allocated_skill_info(
    ::Protocol::SkillInfo* skill_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skill_info_);
  }
  _impl_.skill_info_ = skill_info;
  if (skill_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.skill_info)
}
inline ::Protocol::SkillInfo* ObjectInfo::release_skill_info() {
  
  ::Protocol::SkillInfo* temp = _impl_.skill_info_;
  _impl_.skill_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SkillInfo* ObjectInfo::unsafe_arena_release_skill_info() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.skill_info)
  
  ::Protocol::SkillInfo* temp = _impl_.skill_info_;
  _impl_.skill_info_ = nullptr;
  return temp;
}
inline ::Protocol::SkillInfo* ObjectInfo::_internal_mutable_skill_info() {
  
  if (_impl_.skill_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SkillInfo>(GetArenaForAllocation());
    _impl_.skill_info_ = p;
  }
  return _impl_.skill_info_;
}
inline ::Protocol::SkillInfo* ObjectInfo::mutable_skill_info() {
  ::Protocol::SkillInfo* _msg = _internal_mutable_skill_info();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.skill_info)
  return _msg;
}
inline void ObjectInfo::set_allocated_skill_info(::Protocol::SkillInfo* skill_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.skill_info_;
  }
  if (skill_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(skill_info);
    if (message_arena != submessage_arena) {
      skill_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skill_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.skill_info_ = skill_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.skill_info)
}

// .Protocol.MonsterType monster_type = 8;
inline void ObjectInfo::clear_monster_type() {
  _impl_.monster_type_ = 0;
}
inline ::Protocol::MonsterType ObjectInfo::_internal_monster_type() const {
  return static_cast< ::Protocol::MonsterType >(_impl_.monster_type_);
}
inline ::Protocol::MonsterType ObjectInfo::monster_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.monster_type)
  return _internal_monster_type();
}
inline void ObjectInfo::_internal_set_monster_type(::Protocol::MonsterType value) {
  
  _impl_.monster_type_ = value;
}
inline void ObjectInfo::set_monster_type(::Protocol::MonsterType value) {
  _internal_set_monster_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.monster_type)
}

// .Protocol.ProjectileType projectile_type = 9;
inline void ObjectInfo::clear_projectile_type() {
  _impl_.projectile_type_ = 0;
}
inline ::Protocol::ProjectileType ObjectInfo::_internal_projectile_type() const {
  return static_cast< ::Protocol::ProjectileType >(_impl_.projectile_type_);
}
inline ::Protocol::ProjectileType ObjectInfo::projectile_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.projectile_type)
  return _internal_projectile_type();
}
inline void ObjectInfo::_internal_set_projectile_type(::Protocol::ProjectileType value) {
  
  _impl_.projectile_type_ = value;
}
inline void ObjectInfo::set_projectile_type(::Protocol::ProjectileType value) {
  _internal_set_projectile_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.projectile_type)
}

// .Protocol.ProjectileInfo projectile_info = 10;
inline bool ObjectInfo::_internal_has_projectile_info() const {
  return this != internal_default_instance() && _impl_.projectile_info_ != nullptr;
}
inline bool ObjectInfo::has_projectile_info() const {
  return _internal_has_projectile_info();
}
inline void ObjectInfo::clear_projectile_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.projectile_info_ != nullptr) {
    delete _impl_.projectile_info_;
  }
  _impl_.projectile_info_ = nullptr;
}
inline const ::Protocol::ProjectileInfo& ObjectInfo::_internal_projectile_info() const {
  const ::Protocol::ProjectileInfo* p = _impl_.projectile_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ProjectileInfo&>(
      ::Protocol::_ProjectileInfo_default_instance_);
}
inline const ::Protocol::ProjectileInfo& ObjectInfo::projectile_info() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.projectile_info)
  return _internal_projectile_info();
}
inline void ObjectInfo::unsafe_arena_set_allocated_projectile_info(
    ::Protocol::ProjectileInfo* projectile_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectile_info_);
  }
  _impl_.projectile_info_ = projectile_info;
  if (projectile_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.projectile_info)
}
inline ::Protocol::ProjectileInfo* ObjectInfo::release_projectile_info() {
  
  ::Protocol::ProjectileInfo* temp = _impl_.projectile_info_;
  _impl_.projectile_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ProjectileInfo* ObjectInfo::unsafe_arena_release_projectile_info() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.projectile_info)
  
  ::Protocol::ProjectileInfo* temp = _impl_.projectile_info_;
  _impl_.projectile_info_ = nullptr;
  return temp;
}
inline ::Protocol::ProjectileInfo* ObjectInfo::_internal_mutable_projectile_info() {
  
  if (_impl_.projectile_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ProjectileInfo>(GetArenaForAllocation());
    _impl_.projectile_info_ = p;
  }
  return _impl_.projectile_info_;
}
inline ::Protocol::ProjectileInfo* ObjectInfo::mutable_projectile_info() {
  ::Protocol::ProjectileInfo* _msg = _internal_mutable_projectile_info();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.projectile_info)
  return _msg;
}
inline void ObjectInfo::set_allocated_projectile_info(::Protocol::ProjectileInfo* projectile_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.projectile_info_;
  }
  if (projectile_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(projectile_info);
    if (message_arena != submessage_arena) {
      projectile_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectile_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectile_info_ = projectile_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.projectile_info)
}

// .Protocol.EnvType env_type = 11;
inline void ObjectInfo::clear_env_type() {
  _impl_.env_type_ = 0;
}
inline ::Protocol::EnvType ObjectInfo::_internal_env_type() const {
  return static_cast< ::Protocol::EnvType >(_impl_.env_type_);
}
inline ::Protocol::EnvType ObjectInfo::env_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.env_type)
  return _internal_env_type();
}
inline void ObjectInfo::_internal_set_env_type(::Protocol::EnvType value) {
  
  _impl_.env_type_ = value;
}
inline void ObjectInfo::set_env_type(::Protocol::EnvType value) {
  _internal_set_env_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.env_type)
}

// -------------------------------------------------------------------

// ItemInfo

// uint64 item_id = 1;
inline void ItemInfo::clear_item_id() {
  _impl_.item_id_ = uint64_t{0u};
}
inline uint64_t ItemInfo::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint64_t ItemInfo::item_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.item_id)
  return _internal_item_id();
}
inline void ItemInfo::_internal_set_item_id(uint64_t value) {
  
  _impl_.item_id_ = value;
}
inline void ItemInfo::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.item_id)
}

// int32 template_id = 2;
inline void ItemInfo::clear_template_id() {
  _impl_.template_id_ = 0;
}
inline int32_t ItemInfo::_internal_template_id() const {
  return _impl_.template_id_;
}
inline int32_t ItemInfo::template_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.template_id)
  return _internal_template_id();
}
inline void ItemInfo::_internal_set_template_id(int32_t value) {
  
  _impl_.template_id_ = value;
}
inline void ItemInfo::set_template_id(int32_t value) {
  _internal_set_template_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.template_id)
}

// .Protocol.ItemSlotType item_slot_type = 3;
inline void ItemInfo::clear_item_slot_type() {
  _impl_.item_slot_type_ = 0;
}
inline ::Protocol::ItemSlotType ItemInfo::_internal_item_slot_type() const {
  return static_cast< ::Protocol::ItemSlotType >(_impl_.item_slot_type_);
}
inline ::Protocol::ItemSlotType ItemInfo::item_slot_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.item_slot_type)
  return _internal_item_slot_type();
}
inline void ItemInfo::_internal_set_item_slot_type(::Protocol::ItemSlotType value) {
  
  _impl_.item_slot_type_ = value;
}
inline void ItemInfo::set_item_slot_type(::Protocol::ItemSlotType value) {
  _internal_set_item_slot_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.item_slot_type)
}

// int32 count = 4;
inline void ItemInfo::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t ItemInfo::_internal_count() const {
  return _impl_.count_;
}
inline int32_t ItemInfo::count() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.count)
  return _internal_count();
}
inline void ItemInfo::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void ItemInfo::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
