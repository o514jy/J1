// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ObjectType : int {
  OBJECT_TYPE_NONE = 0,
  OBJECT_TYPE_CREATURE = 1,
  OBJECT_TYPE_PROJECTILE = 2,
  OBJECT_TYPE_ENV = 3,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ObjectType_IsValid(int value);
constexpr ObjectType ObjectType_MIN = OBJECT_TYPE_NONE;
constexpr ObjectType ObjectType_MAX = OBJECT_TYPE_ENV;
constexpr int ObjectType_ARRAYSIZE = ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor();
template<typename T>
inline const std::string& ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectType_descriptor(), enum_t_value);
}
inline bool ObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectType>(
    ObjectType_descriptor(), name, value);
}
enum ProjectileType : int {
  PROJECTILE_TYPE_NONE = 0,
  PROJECTILE_TYPE_GENERAL = 1,
  ProjectileType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProjectileType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProjectileType_IsValid(int value);
constexpr ProjectileType ProjectileType_MIN = PROJECTILE_TYPE_NONE;
constexpr ProjectileType ProjectileType_MAX = PROJECTILE_TYPE_GENERAL;
constexpr int ProjectileType_ARRAYSIZE = ProjectileType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectileType_descriptor();
template<typename T>
inline const std::string& ProjectileType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProjectileType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProjectileType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProjectileType_descriptor(), enum_t_value);
}
inline bool ProjectileType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProjectileType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProjectileType>(
    ProjectileType_descriptor(), name, value);
}
enum EnvType : int {
  ENV_TYPE_NONE = 0,
  ENV_TYPE_PORTAL = 1,
  EnvType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EnvType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EnvType_IsValid(int value);
constexpr EnvType EnvType_MIN = ENV_TYPE_NONE;
constexpr EnvType EnvType_MAX = ENV_TYPE_PORTAL;
constexpr int EnvType_ARRAYSIZE = EnvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvType_descriptor();
template<typename T>
inline const std::string& EnvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnvType_descriptor(), enum_t_value);
}
inline bool EnvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EnvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnvType>(
    EnvType_descriptor(), name, value);
}
enum CreatureType : int {
  CREATURE_TYPE_NONE = 0,
  CREATURE_TYPE_PLAYER = 1,
  CREATURE_TYPE_MONSTER = 2,
  CREATURE_TYPE_NPC = 3,
  CreatureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreatureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreatureType_IsValid(int value);
constexpr CreatureType CreatureType_MIN = CREATURE_TYPE_NONE;
constexpr CreatureType CreatureType_MAX = CREATURE_TYPE_NPC;
constexpr int CreatureType_ARRAYSIZE = CreatureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatureType_descriptor();
template<typename T>
inline const std::string& CreatureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreatureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreatureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreatureType_descriptor(), enum_t_value);
}
inline bool CreatureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreatureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreatureType>(
    CreatureType_descriptor(), name, value);
}
enum PlayerType : int {
  PLAYER_TYPE_NONE = 0,
  PLAYER_TYPE_KNIGHT = 1,
  PLAYER_TYPE_MAGE = 2,
  PLAYER_TYPE_ARCHER = 3,
  PlayerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlayerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlayerType_IsValid(int value);
constexpr PlayerType PlayerType_MIN = PLAYER_TYPE_NONE;
constexpr PlayerType PlayerType_MAX = PLAYER_TYPE_ARCHER;
constexpr int PlayerType_ARRAYSIZE = PlayerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerType_descriptor();
template<typename T>
inline const std::string& PlayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerType_descriptor(), enum_t_value);
}
inline bool PlayerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerType>(
    PlayerType_descriptor(), name, value);
}
enum MonsterType : int {
  MONSTER_TYPE_NONE = 0,
  MONSTER_TYPE_GENERAL = 1,
  MONSTER_TYPE_BOSS = 2,
  MonsterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MonsterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MonsterType_IsValid(int value);
constexpr MonsterType MonsterType_MIN = MONSTER_TYPE_NONE;
constexpr MonsterType MonsterType_MAX = MONSTER_TYPE_BOSS;
constexpr int MonsterType_ARRAYSIZE = MonsterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterType_descriptor();
template<typename T>
inline const std::string& MonsterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MonsterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MonsterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MonsterType_descriptor(), enum_t_value);
}
inline bool MonsterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MonsterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MonsterType>(
    MonsterType_descriptor(), name, value);
}
enum MoveState : int {
  MOVE_STATE_NONE = 0,
  MOVE_STATE_IDLE = 1,
  MOVE_STATE_RUN = 2,
  MOVE_STATE_DASH = 3,
  MOVE_STATE_SKILL = 4,
  MOVE_STATE_DEAD = 6,
  MOVE_STATE_GIMMICK = 7,
  MoveState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MoveState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MoveState_IsValid(int value);
constexpr MoveState MoveState_MIN = MOVE_STATE_NONE;
constexpr MoveState MoveState_MAX = MOVE_STATE_GIMMICK;
constexpr int MoveState_ARRAYSIZE = MoveState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveState_descriptor();
template<typename T>
inline const std::string& MoveState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MoveState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MoveState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MoveState_descriptor(), enum_t_value);
}
inline bool MoveState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MoveState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MoveState>(
    MoveState_descriptor(), name, value);
}
enum StatType : int {
  STAT_TYPE_MAX_HP = 0,
  STAT_TYPE_HP = 1,
  STAT_TYPE_HP_REGEN = 2,
  STAT_TYPE_MAX_MP = 3,
  STAT_TYPE_MP = 4,
  STAT_TYPE_MP_REGEN = 5,
  STAT_TYPE_ATTACK = 6,
  STAT_TYPE_DEFENCE = 7,
  STAT_TYPE_DODGE = 8,
  STAT_TYPE_ATTACK_SPEED = 9,
  STAT_TYPE_MOVE_SPEED = 10,
  STAT_TYPE_CRI_RATE = 11,
  STAT_TYPE_CRI_DAMAGE = 12,
  STAT_TYPE_STR = 13,
  STAT_TYPE_DEX = 14,
  STAT_TYPE_INT = 15,
  STAT_TYPE_CON = 16,
  STAT_TYPE_WIS = 17,
  StatType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StatType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StatType_IsValid(int value);
constexpr StatType StatType_MIN = STAT_TYPE_MAX_HP;
constexpr StatType StatType_MAX = STAT_TYPE_WIS;
constexpr int StatType_ARRAYSIZE = StatType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatType_descriptor();
template<typename T>
inline const std::string& StatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatType_descriptor(), enum_t_value);
}
inline bool StatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatType>(
    StatType_descriptor(), name, value);
}
enum BuffType : int {
  BUFF_TYPE_NONE = 0,
  BUFF_TYPE_HIT = 1,
  BUFF_TYPE_HEAL = 2,
  BUFF_TYPE_BUFF_STAT = 3,
  BuffType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BuffType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BuffType_IsValid(int value);
constexpr BuffType BuffType_MIN = BUFF_TYPE_NONE;
constexpr BuffType BuffType_MAX = BUFF_TYPE_BUFF_STAT;
constexpr int BuffType_ARRAYSIZE = BuffType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuffType_descriptor();
template<typename T>
inline const std::string& BuffType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuffType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuffType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuffType_descriptor(), enum_t_value);
}
inline bool BuffType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuffType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuffType>(
    BuffType_descriptor(), name, value);
}
enum BuffDurationType : int {
  BUFF_DURATION_TYPE_NONE = 0,
  BUFF_DURATION_TYPE_INSTANT = 1,
  BUFF_DURATION_TYPE_FINITE = 2,
  BUFF_DURATION_TYPE_INFINITE = 3,
  BuffDurationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BuffDurationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BuffDurationType_IsValid(int value);
constexpr BuffDurationType BuffDurationType_MIN = BUFF_DURATION_TYPE_NONE;
constexpr BuffDurationType BuffDurationType_MAX = BUFF_DURATION_TYPE_INFINITE;
constexpr int BuffDurationType_ARRAYSIZE = BuffDurationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuffDurationType_descriptor();
template<typename T>
inline const std::string& BuffDurationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuffDurationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuffDurationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuffDurationType_descriptor(), enum_t_value);
}
inline bool BuffDurationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuffDurationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuffDurationType>(
    BuffDurationType_descriptor(), name, value);
}
enum SkillType : int {
  SKILL_TYPE_NONE = 0,
  SKILL_TYPE_CLOSE = 1,
  SKILL_TYPE_PROJECTILE = 2,
  SkillType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SkillType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SkillType_IsValid(int value);
constexpr SkillType SkillType_MIN = SKILL_TYPE_NONE;
constexpr SkillType SkillType_MAX = SKILL_TYPE_PROJECTILE;
constexpr int SkillType_ARRAYSIZE = SkillType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillType_descriptor();
template<typename T>
inline const std::string& SkillType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SkillType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SkillType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SkillType_descriptor(), enum_t_value);
}
inline bool SkillType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SkillType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SkillType>(
    SkillType_descriptor(), name, value);
}
enum EffectType : int {
  EFFECT_TYPE_NONE = 0,
  EFFECT_TYPE_RECTANGLE = 1,
  EFFECT_TYPE_CIRCLE = 2,
  EFFECT_TYPE_PIZZA = 3,
  EffectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EffectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EffectType_IsValid(int value);
constexpr EffectType EffectType_MIN = EFFECT_TYPE_NONE;
constexpr EffectType EffectType_MAX = EFFECT_TYPE_PIZZA;
constexpr int EffectType_ARRAYSIZE = EffectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EffectType_descriptor();
template<typename T>
inline const std::string& EffectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EffectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EffectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EffectType_descriptor(), enum_t_value);
}
inline bool EffectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EffectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EffectType>(
    EffectType_descriptor(), name, value);
}
enum SkillSlot : int {
  SKILL_SLOT_NONE = 0,
  SKILL_SLOT_ATTACK = 1,
  SKILL_SLOT_Q = 2,
  SKILL_SLOT_W = 3,
  SKILL_SLOT_E = 4,
  SKILL_SLOT_R = 5,
  SKILL_SLOT_DASH = 6,
  SKILL_SLOD_ADVANCED = 7,
  SKILL_SLOT_GIMMICK = 8,
  SkillSlot_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SkillSlot_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SkillSlot_IsValid(int value);
constexpr SkillSlot SkillSlot_MIN = SKILL_SLOT_NONE;
constexpr SkillSlot SkillSlot_MAX = SKILL_SLOT_GIMMICK;
constexpr int SkillSlot_ARRAYSIZE = SkillSlot_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillSlot_descriptor();
template<typename T>
inline const std::string& SkillSlot_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SkillSlot>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SkillSlot_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SkillSlot_descriptor(), enum_t_value);
}
inline bool SkillSlot_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SkillSlot* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SkillSlot>(
    SkillSlot_descriptor(), name, value);
}
enum RoomType : int {
  ROOM_TYPE_NONE = 0,
  ROOM_TYPE_START_ROOM = 1,
  ROOM_TYPE_DUNGEON_ROOM = 2,
  RoomType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoomType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RoomType_IsValid(int value);
constexpr RoomType RoomType_MIN = ROOM_TYPE_NONE;
constexpr RoomType RoomType_MAX = ROOM_TYPE_DUNGEON_ROOM;
constexpr int RoomType_ARRAYSIZE = RoomType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomType_descriptor();
template<typename T>
inline const std::string& RoomType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoomType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoomType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoomType_descriptor(), enum_t_value);
}
inline bool RoomType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoomType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomType>(
    RoomType_descriptor(), name, value);
}
enum RoomState : int {
  ROOM_STATE_NONE = 0,
  ROOM_STATE_PREPARE = 1,
  ROOM_STATE_BATTLE = 2,
  RoomState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoomState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RoomState_IsValid(int value);
constexpr RoomState RoomState_MIN = ROOM_STATE_NONE;
constexpr RoomState RoomState_MAX = ROOM_STATE_BATTLE;
constexpr int RoomState_ARRAYSIZE = RoomState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomState_descriptor();
template<typename T>
inline const std::string& RoomState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoomState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoomState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoomState_descriptor(), enum_t_value);
}
inline bool RoomState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoomState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomState>(
    RoomState_descriptor(), name, value);
}
enum Direction : int {
  DIR_NONE = 0,
  DIR_UP = 1,
  DIR_RIGHT = 2,
  DIR_DOWN = 3,
  DIR_LEFT = 4,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Direction_IsValid(int value);
constexpr Direction Direction_MIN = DIR_NONE;
constexpr Direction Direction_MAX = DIR_LEFT;
constexpr int Direction_ARRAYSIZE = Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor();
template<typename T>
inline const std::string& Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Direction_descriptor(), enum_t_value);
}
inline bool Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Direction>(
    Direction_descriptor(), name, value);
}
enum ItemType : int {
  ITEM_TYPE_NONE = 0,
  ITEM_TYPE_EQUIPMENT = 1,
  ITEM_TYPE_CONSUMABLE = 2,
  ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ItemType_IsValid(int value);
constexpr ItemType ItemType_MIN = ITEM_TYPE_NONE;
constexpr ItemType ItemType_MAX = ITEM_TYPE_CONSUMABLE;
constexpr int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor();
template<typename T>
inline const std::string& ItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemType_descriptor(), enum_t_value);
}
inline bool ItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
enum ItemSubType : int {
  ITEM_SUB_TYPE_NONE = 0,
  ITEM_SUB_TYPE_MAINWEAPON = 1,
  ITEM_SUB_TYPE_SUBWEAPON = 2,
  ITEM_SUB_TYPE_HELMET = 3,
  ITEM_SUB_TYPE_CHEST = 4,
  ITEM_SUB_TYPE_LEG = 5,
  ITEM_SUB_TYPE_SHOES = 6,
  ITEM_SUB_TYPE_GLOVES = 7,
  ITEM_SUB_TYPE_SHOULDER = 8,
  ITEM_SUB_TYPE_RING = 9,
  ITEM_SUB_TYPE_AMULET = 10,
  ITEM_SUB_TYPE_CONSUMABLE = 12,
  ItemSubType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ItemSubType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ItemSubType_IsValid(int value);
constexpr ItemSubType ItemSubType_MIN = ITEM_SUB_TYPE_NONE;
constexpr ItemSubType ItemSubType_MAX = ITEM_SUB_TYPE_CONSUMABLE;
constexpr int ItemSubType_ARRAYSIZE = ItemSubType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemSubType_descriptor();
template<typename T>
inline const std::string& ItemSubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemSubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemSubType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemSubType_descriptor(), enum_t_value);
}
inline bool ItemSubType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemSubType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemSubType>(
    ItemSubType_descriptor(), name, value);
}
enum ItemSlotType : int {
  ITEM_SLOT_TYPE_NONE = 0,
  ITEM_SLOT_TYPE_MAINWEAPON = 1,
  ITEM_SLOT_TYPE_SUBWEAPON = 2,
  ITEM_SLOT_TYPE_HELMET = 3,
  ITEM_SLOT_TYPE_CHEST = 4,
  ITEM_SLOT_TYPE_LEG = 5,
  ITEM_SLOT_TYPE_SHOES = 6,
  ITEM_SLOT_TYPE_GLOVES = 7,
  ITEM_SLOT_TYPE_SHOULDER = 8,
  ITEM_SLOT_TYPE_RING = 9,
  ITEM_SLOT_TYPE_AMULET = 10,
  ITEM_SLOT_TYPE_EQUIPMENT_MAX = 11,
  ITEM_SLOT_TYPE_INVENTORY = 100,
  ITEM_SLOT_TYPE_WAREHOUSE = 101,
  ItemSlotType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ItemSlotType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ItemSlotType_IsValid(int value);
constexpr ItemSlotType ItemSlotType_MIN = ITEM_SLOT_TYPE_NONE;
constexpr ItemSlotType ItemSlotType_MAX = ITEM_SLOT_TYPE_WAREHOUSE;
constexpr int ItemSlotType_ARRAYSIZE = ItemSlotType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemSlotType_descriptor();
template<typename T>
inline const std::string& ItemSlotType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemSlotType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemSlotType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemSlotType_descriptor(), enum_t_value);
}
inline bool ItemSlotType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemSlotType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemSlotType>(
    ItemSlotType_descriptor(), name, value);
}
enum ItemStatus : int {
  ITEM_STATUS_NONE = 0,
  ITEM_STATUS_EQUIPPED = 1,
  ITEM_STATUS_INVENTORY = 2,
  ITEM_STATUS_WAREHOUSE = 3,
  ItemStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ItemStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ItemStatus_IsValid(int value);
constexpr ItemStatus ItemStatus_MIN = ITEM_STATUS_NONE;
constexpr ItemStatus ItemStatus_MAX = ITEM_STATUS_WAREHOUSE;
constexpr int ItemStatus_ARRAYSIZE = ItemStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemStatus_descriptor();
template<typename T>
inline const std::string& ItemStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemStatus_descriptor(), enum_t_value);
}
inline bool ItemStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemStatus>(
    ItemStatus_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ObjectType>() {
  return ::Protocol::ObjectType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ProjectileType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ProjectileType>() {
  return ::Protocol::ProjectileType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::EnvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EnvType>() {
  return ::Protocol::EnvType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::CreatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::CreatureType>() {
  return ::Protocol::CreatureType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::PlayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PlayerType>() {
  return ::Protocol::PlayerType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::MonsterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MonsterType>() {
  return ::Protocol::MonsterType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::MoveState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MoveState>() {
  return ::Protocol::MoveState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::StatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::StatType>() {
  return ::Protocol::StatType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::BuffType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::BuffType>() {
  return ::Protocol::BuffType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::BuffDurationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::BuffDurationType>() {
  return ::Protocol::BuffDurationType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::SkillType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::SkillType>() {
  return ::Protocol::SkillType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::EffectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EffectType>() {
  return ::Protocol::EffectType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::SkillSlot> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::SkillSlot>() {
  return ::Protocol::SkillSlot_descriptor();
}
template <> struct is_proto_enum< ::Protocol::RoomType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::RoomType>() {
  return ::Protocol::RoomType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::RoomState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::RoomState>() {
  return ::Protocol::RoomState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::Direction>() {
  return ::Protocol::Direction_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ItemType>() {
  return ::Protocol::ItemType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ItemSubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ItemSubType>() {
  return ::Protocol::ItemSubType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ItemSlotType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ItemSlotType>() {
  return ::Protocol::ItemSlotType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ItemStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ItemStatus>() {
  return ::Protocol::ItemStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
