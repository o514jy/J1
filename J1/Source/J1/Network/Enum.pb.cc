// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#include "Enum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
}  // namespace Protocol
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Enum_2eproto[21];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Enum_2eproto = nullptr;
const uint32_t TableStruct_Enum_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Enum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nEnum.proto\022\010Protocol*m\n\nObjectType\022\024\n\020"
  "OBJECT_TYPE_NONE\020\000\022\030\n\024OBJECT_TYPE_CREATU"
  "RE\020\001\022\032\n\026OBJECT_TYPE_PROJECTILE\020\002\022\023\n\017OBJE"
  "CT_TYPE_ENV\020\003*G\n\016ProjectileType\022\030\n\024PROJE"
  "CTILE_TYPE_NONE\020\000\022\033\n\027PROJECTILE_TYPE_GEN"
  "ERAL\020\001*1\n\007EnvType\022\021\n\rENV_TYPE_NONE\020\000\022\023\n\017"
  "ENV_TYPE_PORTAL\020\001*r\n\014CreatureType\022\026\n\022CRE"
  "ATURE_TYPE_NONE\020\000\022\030\n\024CREATURE_TYPE_PLAYE"
  "R\020\001\022\031\n\025CREATURE_TYPE_MONSTER\020\002\022\025\n\021CREATU"
  "RE_TYPE_NPC\020\003*h\n\nPlayerType\022\024\n\020PLAYER_TY"
  "PE_NONE\020\000\022\026\n\022PLAYER_TYPE_KNIGHT\020\001\022\024\n\020PLA"
  "YER_TYPE_MAGE\020\002\022\026\n\022PLAYER_TYPE_ARCHER\020\003*"
  "U\n\013MonsterType\022\025\n\021MONSTER_TYPE_NONE\020\000\022\030\n"
  "\024MONSTER_TYPE_GENERAL\020\001\022\025\n\021MONSTER_TYPE_"
  "BOSS\020\002*\241\001\n\tMoveState\022\023\n\017MOVE_STATE_NONE\020"
  "\000\022\023\n\017MOVE_STATE_IDLE\020\001\022\022\n\016MOVE_STATE_RUN"
  "\020\002\022\023\n\017MOVE_STATE_DASH\020\003\022\024\n\020MOVE_STATE_SK"
  "ILL\020\004\022\023\n\017MOVE_STATE_DEAD\020\006\022\026\n\022MOVE_STATE"
  "_GIMMICK\020\007*\223\003\n\010StatType\022\024\n\020STAT_TYPE_MAX"
  "_HP\020\000\022\020\n\014STAT_TYPE_HP\020\001\022\026\n\022STAT_TYPE_HP_"
  "REGEN\020\002\022\024\n\020STAT_TYPE_MAX_MP\020\003\022\020\n\014STAT_TY"
  "PE_MP\020\004\022\026\n\022STAT_TYPE_MP_REGEN\020\005\022\024\n\020STAT_"
  "TYPE_ATTACK\020\006\022\025\n\021STAT_TYPE_DEFENCE\020\007\022\023\n\017"
  "STAT_TYPE_DODGE\020\010\022\032\n\026STAT_TYPE_ATTACK_SP"
  "EED\020\t\022\030\n\024STAT_TYPE_MOVE_SPEED\020\n\022\026\n\022STAT_"
  "TYPE_CRI_RATE\020\013\022\030\n\024STAT_TYPE_CRI_DAMAGE\020"
  "\014\022\021\n\rSTAT_TYPE_STR\020\r\022\021\n\rSTAT_TYPE_DEX\020\016\022"
  "\021\n\rSTAT_TYPE_INT\020\017\022\021\n\rSTAT_TYPE_CON\020\020\022\021\n"
  "\rSTAT_TYPE_WIS\020\021*^\n\010BuffType\022\022\n\016BUFF_TYP"
  "E_NONE\020\000\022\021\n\rBUFF_TYPE_HIT\020\001\022\022\n\016BUFF_TYPE"
  "_HEAL\020\002\022\027\n\023BUFF_TYPE_BUFF_STAT\020\003*\221\001\n\020Buf"
  "fDurationType\022\033\n\027BUFF_DURATION_TYPE_NONE"
  "\020\000\022\036\n\032BUFF_DURATION_TYPE_INSTANT\020\001\022\037\n\033BU"
  "FF_DURATION_TYPE_DURATION\020\002\022\037\n\033BUFF_DURA"
  "TION_TYPE_INFINITE\020\003*\320\001\n\021CreatureStateFl"
  "ag\022\034\n\030CREATURE_STATE_FLAG_NONE\020\000\022\034\n\030CREA"
  "TURE_STATE_FLAG_SLOW\020\001\022\034\n\030CREATURE_STATE"
  "_FLAG_STUN\020\002\022\036\n\032CREATURE_STATE_FLAG_FAST"
  "ER\020\003\022\036\n\032CREATURE_STATE_FLAG_POISON\020\004\022!\n\035"
  "CREATURE_STATE_FLAG_MAX_COUNT\020\005*Q\n\tSkill"
  "Type\022\023\n\017SKILL_TYPE_NONE\020\000\022\024\n\020SKILL_TYPE_"
  "CLOSE\020\001\022\031\n\025SKILL_TYPE_PROJECTILE\020\002*l\n\nEf"
  "fectType\022\024\n\020EFFECT_TYPE_NONE\020\000\022\031\n\025EFFECT"
  "_TYPE_RECTANGLE\020\001\022\026\n\022EFFECT_TYPE_CIRCLE\020"
  "\002\022\025\n\021EFFECT_TYPE_PIZZA\020\003*\305\001\n\tSkillSlot\022\023"
  "\n\017SKILL_SLOT_NONE\020\000\022\025\n\021SKILL_SLOT_ATTACK"
  "\020\001\022\020\n\014SKILL_SLOT_Q\020\002\022\020\n\014SKILL_SLOT_W\020\003\022\020"
  "\n\014SKILL_SLOT_E\020\004\022\020\n\014SKILL_SLOT_R\020\005\022\023\n\017SK"
  "ILL_SLOT_DASH\020\006\022\027\n\023SKILL_SLOD_ADVANCED\020\007"
  "\022\026\n\022SKILL_SLOT_GIMMICK\020\010*T\n\010RoomType\022\022\n\016"
  "ROOM_TYPE_NONE\020\000\022\030\n\024ROOM_TYPE_START_ROOM"
  "\020\001\022\032\n\026ROOM_TYPE_DUNGEON_ROOM\020\002*O\n\tRoomSt"
  "ate\022\023\n\017ROOM_STATE_NONE\020\000\022\026\n\022ROOM_STATE_P"
  "REPARE\020\001\022\025\n\021ROOM_STATE_BATTLE\020\002*P\n\tDirec"
  "tion\022\014\n\010DIR_NONE\020\000\022\n\n\006DIR_UP\020\001\022\r\n\tDIR_RI"
  "GHT\020\002\022\014\n\010DIR_DOWN\020\003\022\014\n\010DIR_LEFT\020\004*Q\n\010Ite"
  "mType\022\022\n\016ITEM_TYPE_NONE\020\000\022\027\n\023ITEM_TYPE_E"
  "QUIPMENT\020\001\022\030\n\024ITEM_TYPE_CONSUMABLE\020\002*\311\002\n"
  "\013ItemSubType\022\026\n\022ITEM_SUB_TYPE_NONE\020\000\022\034\n\030"
  "ITEM_SUB_TYPE_MAINWEAPON\020\001\022\033\n\027ITEM_SUB_T"
  "YPE_SUBWEAPON\020\002\022\030\n\024ITEM_SUB_TYPE_HELMET\020"
  "\003\022\027\n\023ITEM_SUB_TYPE_CHEST\020\004\022\025\n\021ITEM_SUB_T"
  "YPE_LEG\020\005\022\027\n\023ITEM_SUB_TYPE_SHOES\020\006\022\030\n\024IT"
  "EM_SUB_TYPE_GLOVES\020\007\022\032\n\026ITEM_SUB_TYPE_SH"
  "OULDER\020\010\022\026\n\022ITEM_SUB_TYPE_RING\020\t\022\030\n\024ITEM"
  "_SUB_TYPE_AMULET\020\n\022\034\n\030ITEM_SUB_TYPE_CONS"
  "UMABLE\020\014*\225\003\n\014ItemSlotType\022\027\n\023ITEM_SLOT_T"
  "YPE_NONE\020\000\022\035\n\031ITEM_SLOT_TYPE_MAINWEAPON\020"
  "\001\022\034\n\030ITEM_SLOT_TYPE_SUBWEAPON\020\002\022\031\n\025ITEM_"
  "SLOT_TYPE_HELMET\020\003\022\030\n\024ITEM_SLOT_TYPE_CHE"
  "ST\020\004\022\026\n\022ITEM_SLOT_TYPE_LEG\020\005\022\030\n\024ITEM_SLO"
  "T_TYPE_SHOES\020\006\022\031\n\025ITEM_SLOT_TYPE_GLOVES\020"
  "\007\022\033\n\027ITEM_SLOT_TYPE_SHOULDER\020\010\022\027\n\023ITEM_S"
  "LOT_TYPE_RING\020\t\022\031\n\025ITEM_SLOT_TYPE_AMULET"
  "\020\n\022 \n\034ITEM_SLOT_TYPE_EQUIPMENT_MAX\020\013\022\034\n\030"
  "ITEM_SLOT_TYPE_INVENTORY\020d\022\034\n\030ITEM_SLOT_"
  "TYPE_WAREHOUSE\020e*r\n\nItemStatus\022\024\n\020ITEM_S"
  "TATUS_NONE\020\000\022\030\n\024ITEM_STATUS_EQUIPPED\020\001\022\031"
  "\n\025ITEM_STATUS_INVENTORY\020\002\022\031\n\025ITEM_STATUS"
  "_WAREHOUSE\020\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Enum_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Enum_2eproto = {
    false, false, 3180, descriptor_table_protodef_Enum_2eproto,
    "Enum.proto",
    &descriptor_table_Enum_2eproto_once, nullptr, 0, 0,
    schemas, file_default_instances, TableStruct_Enum_2eproto::offsets,
    nullptr, file_level_enum_descriptors_Enum_2eproto,
    file_level_service_descriptors_Enum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Enum_2eproto_getter() {
  return &descriptor_table_Enum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Enum_2eproto(&descriptor_table_Enum_2eproto);
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[0];
}
bool ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[1];
}
bool ProjectileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[2];
}
bool EnvType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[3];
}
bool CreatureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[4];
}
bool PlayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonsterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[5];
}
bool MonsterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MoveState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[6];
}
bool MoveState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[7];
}
bool StatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuffType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[8];
}
bool BuffType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuffDurationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[9];
}
bool BuffDurationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatureStateFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[10];
}
bool CreatureStateFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[11];
}
bool SkillType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EffectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[12];
}
bool EffectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SkillSlot_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[13];
}
bool SkillSlot_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[14];
}
bool RoomType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[15];
}
bool RoomState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[16];
}
bool Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[17];
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[18];
}
bool ItemSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemSlotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[19];
}
bool ItemSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[20];
}
bool ItemStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
